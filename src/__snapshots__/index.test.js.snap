exports[`test ./test/fixtures/cond-expr.slicer.js 1`] = `
"./test/fixtures/cond-expr.js: isConstantOrAlternate(\'consequent\')

    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return \'isConsequent\';
    }
./test/fixtures/cond-expr.js: isConstantOrAlternate(\'alternate\')

    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return \'isAlternate\';
    }
./test/fixtures/cond-expr.js: isConstantOrAlternate(\'neither\')

    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return \`isAlternate\'s Consequent\`;
    }
./test/fixtures/cond-expr.js: isConstantOrAlternate(\'consequent\') && isConstantOrAlternate(\'alternate\')

    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : \'isAlternate\';
    }
./test/fixtures/cond-expr.js: isConstantOrAlternate(\'consequent\') && isConstantOrAlternate(\'alternate\') && isConstantOrAlternate(\'neither\')

    export { isConstantOrAlternate };

    function isConstantOrAlternate(a) {
      return a === \'consequent\' ? \'isConsequent\' : a === \'alternate\' ? \'isAlternate\' : \`isAlternate\'s Consequent\`;
    }
"
`;

exports[`test ./test/fixtures/match-sorter.slicer.js 1`] = `
"./node_modules/match-sorter/dist/cjs/index.js: basic use
    \'use strict\';

    /**
     * @name match-sorter
     * @license MIT license.
     * @copyright (c) 2016 Kent C. Dodds
     * @author Kent C. Dodds <kent@doddsfamily.us>
     */

    var _diacritic = require(\'diacritic\');

    var _diacritic2 = _interopRequireDefault(_diacritic);

    var _globalObject = require(\'global-object\');

    function _interopRequireDefault(obj) {
      return { default: obj };
    }

    var rankings = {
      EQUAL: 6,
      STARTS_WITH: 5,
      WORD_STARTS_WITH: 4,
      CONTAINS: 3,
      ACRONYM: 2,
      MATCHES: 1,
      NO_MATCH: 0
    };

    matchSorter.rankings = rankings;

    function matchSorter(items, value) {
      var options = {};
      var keys = options.keys;

      var threshold = rankings.MATCHES;

      var matchedItems = items.reduce(function (matches, item, index) {
        var _getHighestRanking = getHighestRanking(item, keys, value, options);

        var rank = _getHighestRanking.rank;
        var keyIndex = _getHighestRanking.keyIndex;

        if (rank >= threshold) {
          matches.push({ item: item, rank: rank, index: index, keyIndex: keyIndex });
        }
        return matches;
      }, []);
      return matchedItems.sort(sortRankedItems).map(function (_ref) {
        var item = _ref.item;
        return item;
      });
    }

    function getHighestRanking(item, keys, value, options) {
      return { rank: getMatchRanking(item, value, options), keyIndex: -1 };
    }

    function getMatchRanking(testString, stringToRank, options) {
      testString = prepareValueForComparison(testString, options);
      stringToRank = prepareValueForComparison(stringToRank, options);

      if (testString.indexOf(stringToRank) === 0) {
        return rankings.STARTS_WITH;
      }

      testString.indexOf(stringToRank);


      return rankings.NO_MATCH;
    }

    function sortRankedItems(a, b) {
      var aRank = a.rank;

      var bRank = b.rank;


      return -1;
    }

    function prepareValueForComparison(value, _ref3) {

      value = \'\' + value;
      value = _diacritic2.default.clean(value);

      return value.toLowerCase();
    }

    matchSorter.default = matchSorter;
    module.exports = matchSorter;
    Object.defineProperty(exports, \'__esModule\', { value: true });
"
`;

exports[`test ./test/fixtures/module.slicer.js 1`] = `
"./test/fixtures/module.js: multiply multiplies numbers together

    export { sum, multiply };

    function sum(a, b) {
      return a + b;
    }

    function multiply(a, b) {
      let product, i;
      product = 0;
      for (i = 0; i < b; i++) {
        product = sum(product, a);
      }
      return product;
    }
"
`;
